<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20121012 16:45:15.359" generator="Robot 2.7.3 (Python 2.7.3 on win32)">
<suite source="D:\TestAutomation\TestCase\DATest\SS\SSAreaCI\src\robogenerator\TestCase.html" id="s1" name="TestCase">
<metadata>
</metadata>
<test id="s1-t1" timeout="" name="TestCase1">
<kw type="kw" name="${rc}, ${output} = OperatingSystem.Run And Return Rc And Output" timeout="">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>python runner.py example\\FileBehavior\\file_behavior --strategy ShortestPath</arg>
</arguments>
<msg timestamp="20121012 16:45:15.405" level="TRACE">Arguments: [ u'python runner.py example\\FileBehavior\\file_behavior --strategy ShortestPath' ]</msg>
<msg timestamp="20121012 16:45:15.406" level="INFO">Running command 'python runner.py example\FileBehavior\file_behavior --strategy ShortestPath 2&gt;&amp;1'</msg>
<msg timestamp="20121012 16:45:15.890" level="TRACE">Return: (0, u" All possibles transitions to be tested is 8\n[('zero_file', ('invert_selection', ('',)), 'zero_file'), ('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('zero_file', ('select_all', ('',)), 'zero_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_selected_file', ('delete', ('${filename}',)), 'zero_file'), ('one_selected_file', ('select_all', ('',)), 'one_selected_file'), ('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file'), ('one_unselected_file', ('select_all', ('',)), 'one_selected_file')]\n['zero_file']\n['zero_file']\n All possibles paths to be tested is 15\n['zero_file', 'one_selected_file', 'one_unselected_file']\n*******************\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']\n['Take', 'arc', '1-&gt;1', 'from', '1', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']\n['Take', 'arc', '1-&gt;0', 'from', '1', 'to', '0']\n['Take', 'arc', '0-&gt;0', 'from', '0', 'to', '0']\n['Take', 'arc', '0-&gt;0', 'from', '0', 'to', '0']\n['Cost', '=', '9.0']\n9\n[('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_unselected_file', ('select_all', ('',)), 'one_selected_file'), ('one_selected_file', ('select_all', ('',)), 'one_selected_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file'), ('one_selected_file', ('delete', ('${filename}',)), 'zero_file'), ('zero_file', ('select_all', ('',)), 'zero_file'), ('zero_file', ('select_all', ('',)), 'zero_file')]\nShortest path to cover all transition has 9 transitions to cover\n('zero_file', ('create', ('${filename}',)), 'one_selected_file')\n('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file')\n('one_unselected_file', ('select_all', ('',)), 'one_selected_file')\n('one_selected_file', ('select_all', ('',)), 'one_selected_file')\n('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file')\n('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file')\n('one_selected_file', ('delete', ('${filename}',)), 'zero_file')\n('zero_file', ('select_all', ('',)), 'zero_file')\n('zero_file', ('select_all', ('',)), 'zero_file')\nThe case is to do file behavior test  in cost-effective way\n***********\n{'filename': ['test_file']}")</msg>
<msg timestamp="20121012 16:45:15.890" level="INFO">${rc} = 0</msg>
<msg timestamp="20121012 16:45:15.890" level="INFO">${output} =  All possibles transitions to be tested is 8
[('zero_file', ('invert_selection', ('',)), 'zero_file'), ('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('zero_file', ('select_all', ('...</msg>
<status status="PASS" endtime="20121012 16:45:15.889" starttime="20121012 16:45:15.405"></status>
</kw>
<kw type="kw" name="BuiltIn.Log" timeout="">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20121012 16:45:15.891" level="TRACE">Arguments: [ u" All possibles transitions to be tested is 8\n[('zero_file', ('invert_selection', ('',)), 'zero_file'), ('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('zero_file', ('select_all', ('',)), 'zero_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_selected_file', ('delete', ('${filename}',)), 'zero_file'), ('one_selected_file', ('select_all', ('',)), 'one_selected_file'), ('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file'), ('one_unselected_file', ('select_all', ('',)), 'one_selected_file')]\n['zero_file']\n['zero_file']\n All possibles paths to be tested is 15\n['zero_file', 'one_selected_file', 'one_unselected_file']\n*******************\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']\n['Take', 'arc', '1-&gt;1', 'from', '1', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']\n['Take', 'arc', '1-&gt;0', 'from', '1', 'to', '0']\n['Take', 'arc', '0-&gt;0', 'from', '0', 'to', '0']\n['Take', 'arc', '0-&gt;0', 'from', '0', 'to', '0']\n['Cost', '=', '9.0']\n9\n[('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_unselected_file', ('select_all', ('',)), 'one_selected_file'), ('one_selected_file', ('select_all', ('',)), 'one_selected_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file'), ('one_selected_file', ('delete', ('${filename}',)), 'zero_file'), ('zero_file', ('select_all', ('',)), 'zero_file'), ('zero_file', ('select_all', ('',)), 'zero_file')]\nShortest path to cover all transition has 9 transitions to cover\n('zero_file', ('create', ('${filename}',)), 'one_selected_file')\n('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file')\n('one_unselected_file', ('select_all', ('',)), 'one_selected_file')\n('one_selected_file', ('select_all', ('',)), 'one_selected_file')\n('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file')\n('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file')\n('one_selected_file', ('delete', ('${filename}',)), 'zero_file')\n('zero_file', ('select_all', ('',)), 'zero_file')\n('zero_file', ('select_all', ('',)), 'zero_file')\nThe case is to do file behavior test  in cost-effective way\n***********\n{'filename': ['test_file']}" ]</msg>
<msg timestamp="20121012 16:45:15.891" level="INFO"> All possibles transitions to be tested is 8
[('zero_file', ('invert_selection', ('',)), 'zero_file'), ('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('zero_file', ('select_all', ('',)), 'zero_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_selected_file', ('delete', ('${filename}',)), 'zero_file'), ('one_selected_file', ('select_all', ('',)), 'one_selected_file'), ('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file'), ('one_unselected_file', ('select_all', ('',)), 'one_selected_file')]
['zero_file']
['zero_file']
 All possibles paths to be tested is 15
['zero_file', 'one_selected_file', 'one_unselected_file']
*******************
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']
['Take', 'arc', '1-&gt;1', 'from', '1', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']
['Take', 'arc', '1-&gt;0', 'from', '1', 'to', '0']
['Take', 'arc', '0-&gt;0', 'from', '0', 'to', '0']
['Take', 'arc', '0-&gt;0', 'from', '0', 'to', '0']
['Cost', '=', '9.0']
9
[('zero_file', ('create', ('${filename}',)), 'one_selected_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_unselected_file', ('select_all', ('',)), 'one_selected_file'), ('one_selected_file', ('select_all', ('',)), 'one_selected_file'), ('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file'), ('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file'), ('one_selected_file', ('delete', ('${filename}',)), 'zero_file'), ('zero_file', ('select_all', ('',)), 'zero_file'), ('zero_file', ('select_all', ('',)), 'zero_file')]
Shortest path to cover all transition has 9 transitions to cover
('zero_file', ('create', ('${filename}',)), 'one_selected_file')
('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file')
('one_unselected_file', ('select_all', ('',)), 'one_selected_file')
('one_selected_file', ('select_all', ('',)), 'one_selected_file')
('one_selected_file', ('invert_selection', ('',)), 'one_unselected_file')
('one_unselected_file', ('invert_selection', ('',)), 'one_selected_file')
('one_selected_file', ('delete', ('${filename}',)), 'zero_file')
('zero_file', ('select_all', ('',)), 'zero_file')
('zero_file', ('select_all', ('',)), 'zero_file')
The case is to do file behavior test  in cost-effective way
***********
{'filename': ['test_file']}</msg>
<msg timestamp="20121012 16:45:15.892" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:15.892" starttime="20121012 16:45:15.891"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers" timeout="">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20121012 16:45:15.892" level="TRACE">Arguments: [ 0 | u'0' ]</msg>
<msg timestamp="20121012 16:45:15.893" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20121012 16:45:15.893" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:15.893" starttime="20121012 16:45:15.892"></status>
</kw>
<kw type="kw" name="${rc}, ${output} = OperatingSystem.Run And Return Rc And Output" timeout="">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>python runner.py example\\UnitRestart\\unit_restart_example_1 -g random -t 1</arg>
</arguments>
<msg timestamp="20121012 16:45:15.893" level="TRACE">Arguments: [ u'python runner.py example\\UnitRestart\\unit_restart_example_1 -g random -t 1' ]</msg>
<msg timestamp="20121012 16:45:15.894" level="INFO">Running command 'python runner.py example\UnitRestart\unit_restart_example_1 -g random -t 1 2&gt;&amp;1'</msg>
<msg timestamp="20121012 16:45:16.043" level="TRACE">Return: (0, u'The case is to Restart all kinds of units with required state\n')</msg>
<msg timestamp="20121012 16:45:16.043" level="INFO">${rc} = 0</msg>
<msg timestamp="20121012 16:45:16.043" level="INFO">${output} = The case is to Restart all kinds of units with required state
</msg>
<status status="PASS" endtime="20121012 16:45:16.043" starttime="20121012 16:45:15.893"></status>
</kw>
<kw type="kw" name="BuiltIn.Log" timeout="">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20121012 16:45:16.043" level="TRACE">Arguments: [ u'The case is to Restart all kinds of units with required state\n' ]</msg>
<msg timestamp="20121012 16:45:16.044" level="INFO">The case is to Restart all kinds of units with required state
</msg>
<msg timestamp="20121012 16:45:16.044" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.044" starttime="20121012 16:45:16.043"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers" timeout="">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20121012 16:45:16.044" level="TRACE">Arguments: [ 0 | u'0' ]</msg>
<msg timestamp="20121012 16:45:16.044" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20121012 16:45:16.044" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.044" starttime="20121012 16:45:16.044"></status>
</kw>
<kw type="kw" name="${rc}, ${output} = OperatingSystem.Run And Return Rc And Output" timeout="">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>python runner.py example\\UnitRestart\\unit_restart_example_mbt --strategy DataDriven</arg>
</arguments>
<msg timestamp="20121012 16:45:16.045" level="TRACE">Arguments: [ u'python runner.py example\\UnitRestart\\unit_restart_example_mbt --strategy DataDriven' ]</msg>
<msg timestamp="20121012 16:45:16.046" level="INFO">Running command 'python runner.py example\UnitRestart\unit_restart_example_mbt --strategy DataDriven 2&gt;&amp;1'</msg>
<msg timestamp="20121012 16:45:16.216" level="TRACE">Return: (0, u" All possibles transitions to be tested is 1\n[('idle_state', ('restart_unit_with_mode', ('unit_type', 'state', 'restart_mode')), 'idle_state')]\n['idle_state']\n['idle_state']\n All possibles paths to be tested is 1\nThe case is to Restart all kinds of units with required state\n\n{'unit_type': ['ICSU', 'NPGEP'], 'restart_mode': ['OPT', 'TOT'], 'state': ['WO-EX', 'SP-EX']}")</msg>
<msg timestamp="20121012 16:45:16.216" level="INFO">${rc} = 0</msg>
<msg timestamp="20121012 16:45:16.216" level="INFO">${output} =  All possibles transitions to be tested is 1
[('idle_state', ('restart_unit_with_mode', ('unit_type', 'state', 'restart_mode')), 'idle_state')]
['idle_state']
['idle_state']
 All possibles paths to be...</msg>
<status status="PASS" endtime="20121012 16:45:16.215" starttime="20121012 16:45:16.045"></status>
</kw>
<kw type="kw" name="BuiltIn.Log" timeout="">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20121012 16:45:16.217" level="TRACE">Arguments: [ u" All possibles transitions to be tested is 1\n[('idle_state', ('restart_unit_with_mode', ('unit_type', 'state', 'restart_mode')), 'idle_state')]\n['idle_state']\n['idle_state']\n All possibles paths to be tested is 1\nThe case is to Restart all kinds of units with required state\n\n{'unit_type': ['ICSU', 'NPGEP'], 'restart_mode': ['OPT', 'TOT'], 'state': ['WO-EX', 'SP-EX']}" ]</msg>
<msg timestamp="20121012 16:45:16.217" level="INFO"> All possibles transitions to be tested is 1
[('idle_state', ('restart_unit_with_mode', ('unit_type', 'state', 'restart_mode')), 'idle_state')]
['idle_state']
['idle_state']
 All possibles paths to be tested is 1
The case is to Restart all kinds of units with required state

{'unit_type': ['ICSU', 'NPGEP'], 'restart_mode': ['OPT', 'TOT'], 'state': ['WO-EX', 'SP-EX']}</msg>
<msg timestamp="20121012 16:45:16.217" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.217" starttime="20121012 16:45:16.217"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers" timeout="">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20121012 16:45:16.218" level="TRACE">Arguments: [ 0 | u'0' ]</msg>
<msg timestamp="20121012 16:45:16.218" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20121012 16:45:16.218" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.218" starttime="20121012 16:45:16.217"></status>
</kw>
<kw type="kw" name="${rc}, ${output} = OperatingSystem.Run And Return Rc And Output" timeout="">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>python runner.py example\\UnitStateChange\\state_change --strategy ShortestPath</arg>
</arguments>
<msg timestamp="20121012 16:45:16.220" level="TRACE">Arguments: [ u'python runner.py example\\UnitStateChange\\state_change --strategy ShortestPath' ]</msg>
<msg timestamp="20121012 16:45:16.221" level="INFO">Running command 'python runner.py example\UnitStateChange\state_change --strategy ShortestPath 2&gt;&amp;1'</msg>
<msg timestamp="20121012 16:45:16.479" level="TRACE">Return: (0, u" All possibles transitions to be tested is 16\n[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')]\n['wo_ex_state']\n['wo_ex_state']\n All possibles paths to be tested is 20\n['wo_ex_state', 'bl_id_state', 'bl_re_state', 'te_ex_state', 'se_ou_state', 'se_nh_state', 'te_re_state', 'wo_re_state']\n*******************\n['Take', 'arc', '0-&gt;6', 'from', '0', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;6', 'from', '2', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;6', 'from', '7', 'to', '6']\n['Take', 'arc', '6-&gt;4', 'from', '6', 'to', '4']\n['Take', 'arc', '4-&gt;6', 'from', '4', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']\n['Take', 'arc', '1-&gt;3', 'from', '1', 'to', '3']\n['Take', 'arc', '3-&gt;4', 'from', '3', 'to', '4']\n['Take', 'arc', '4-&gt;5', 'from', '4', 'to', '5']\n['Take', 'arc', '5-&gt;4', 'from', '5', 'to', '4']\n['Take', 'arc', '4-&gt;6', 'from', '4', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;0', 'from', '1', 'to', '0']\n['Cost', '=', '28.0']\n28\n[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state'), ('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state')]\nShortest path to cover all transition has 28 transitions to cover\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')\n('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state')\n('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')\n('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')\n('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state')\n('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state')\n('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')\n('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state')\n('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')\n('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')\n('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state')\nThe case is to change unit state in all kinds of states\n***********\n{'unit_type': 'DMCU-0', 'element_type': 'RNC', 'sfutype': 'SF20H'}")</msg>
<msg timestamp="20121012 16:45:16.480" level="INFO">${rc} = 0</msg>
<msg timestamp="20121012 16:45:16.480" level="INFO">${output} =  All possibles transitions to be tested is 16
[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0...</msg>
<status status="PASS" endtime="20121012 16:45:16.479" starttime="20121012 16:45:16.220"></status>
</kw>
<kw type="kw" name="BuiltIn.Log" timeout="">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20121012 16:45:16.481" level="TRACE">Arguments: [ u" All possibles transitions to be tested is 16\n[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')]\n['wo_ex_state']\n['wo_ex_state']\n All possibles paths to be tested is 20\n['wo_ex_state', 'bl_id_state', 'bl_re_state', 'te_ex_state', 'se_ou_state', 'se_nh_state', 'te_re_state', 'wo_re_state']\n*******************\n['Take', 'arc', '0-&gt;6', 'from', '0', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;6', 'from', '2', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;6', 'from', '7', 'to', '6']\n['Take', 'arc', '6-&gt;4', 'from', '6', 'to', '4']\n['Take', 'arc', '4-&gt;6', 'from', '4', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']\n['Take', 'arc', '1-&gt;3', 'from', '1', 'to', '3']\n['Take', 'arc', '3-&gt;4', 'from', '3', 'to', '4']\n['Take', 'arc', '4-&gt;5', 'from', '4', 'to', '5']\n['Take', 'arc', '5-&gt;4', 'from', '5', 'to', '4']\n['Take', 'arc', '4-&gt;6', 'from', '4', 'to', '6']\n['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']\n['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;0', 'from', '1', 'to', '0']\n['Cost', '=', '28.0']\n28\n[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state'), ('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state')]\nShortest path to cover all transition has 28 transitions to cover\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')\n('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state')\n('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')\n('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')\n('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state')\n('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state')\n('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')\n('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state')\n('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')\n('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')\n('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')\n('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')\n('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')\n('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')\n('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state')\nThe case is to change unit state in all kinds of states\n***********\n{'unit_type': 'DMCU-0', 'element_type': 'RNC', 'sfutype': 'SF20H'}" ]</msg>
<msg timestamp="20121012 16:45:16.481" level="INFO"> All possibles transitions to be tested is 16
[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')]
['wo_ex_state']
['wo_ex_state']
 All possibles paths to be tested is 20
['wo_ex_state', 'bl_id_state', 'bl_re_state', 'te_ex_state', 'se_ou_state', 'se_nh_state', 'te_re_state', 'wo_re_state']
*******************
['Take', 'arc', '0-&gt;6', 'from', '0', 'to', '6']
['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']
['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']
['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;6', 'from', '2', 'to', '6']
['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']
['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']
['Take', 'arc', '7-&gt;6', 'from', '7', 'to', '6']
['Take', 'arc', '6-&gt;4', 'from', '6', 'to', '4']
['Take', 'arc', '4-&gt;6', 'from', '4', 'to', '6']
['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']
['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']
['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;1', 'from', '2', 'to', '1']
['Take', 'arc', '1-&gt;3', 'from', '1', 'to', '3']
['Take', 'arc', '3-&gt;4', 'from', '3', 'to', '4']
['Take', 'arc', '4-&gt;5', 'from', '4', 'to', '5']
['Take', 'arc', '5-&gt;4', 'from', '5', 'to', '4']
['Take', 'arc', '4-&gt;6', 'from', '4', 'to', '6']
['Take', 'arc', '6-&gt;3', 'from', '6', 'to', '3']
['Take', 'arc', '3-&gt;7', 'from', '3', 'to', '7']
['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;0', 'from', '1', 'to', '0']
['Cost', '=', '28.0']
28
[('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state'), ('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state'), ('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state'), ('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state'), ('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state'), ('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state'), ('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state'), ('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state'), ('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state')]
Shortest path to cover all transition has 28 transitions to cover
('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')
('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')
('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')
('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')
('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')
('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state')
('bl_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')
('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')
('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')
('wo_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')
('te_re_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')
('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')
('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')
('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')
('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')
('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')
('bl_id_state', ('restart_unit', ('DMCU-0',)), 'bl_re_state')
('bl_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'BL_ID')), 'bl_id_state')
('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_ex_state')
('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')
('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_nh_state')
('se_nh_state', ('change_unit_state_and_check_result', ('DMCU-0', 'SE')), 'se_ou_state')
('se_ou_state', ('change_unit_state_and_check_result', ('DMCU-0', 'TE')), 'te_re_state')
('te_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'TE-EX')), 'te_ex_state')
('te_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_re_state')
('wo_re_state', ('wait_unit_in_required_state', ('DMCU-0', 'WO-EX')), 'wo_ex_state')
('wo_ex_state', ('change_unit_state_and_check_result', ('DMCU-0', 'BL')), 'bl_id_state')
('bl_id_state', ('change_unit_state_and_check_result', ('DMCU-0', 'WO')), 'wo_ex_state')
The case is to change unit state in all kinds of states
***********
{'unit_type': 'DMCU-0', 'element_type': 'RNC', 'sfutype': 'SF20H'}</msg>
<msg timestamp="20121012 16:45:16.482" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.482" starttime="20121012 16:45:16.480"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers" timeout="">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20121012 16:45:16.482" level="TRACE">Arguments: [ 0 | u'0' ]</msg>
<msg timestamp="20121012 16:45:16.482" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20121012 16:45:16.482" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.482" starttime="20121012 16:45:16.482"></status>
</kw>
<kw type="kw" name="${rc}, ${output} = OperatingSystem.Run And Return Rc And Output" timeout="">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>python runner.py example\\SIPCallService\\SIP_Call_Service --strategy ShortestPath</arg>
</arguments>
<msg timestamp="20121012 16:45:16.483" level="TRACE">Arguments: [ u'python runner.py example\\SIPCallService\\SIP_Call_Service --strategy ShortestPath' ]</msg>
<msg timestamp="20121012 16:45:16.484" level="INFO">Running command 'python runner.py example\SIPCallService\SIP_Call_Service --strategy ShortestPath 2&gt;&amp;1'</msg>
<msg timestamp="20121012 16:45:16.971" level="TRACE">Return: (0, u" All possibles transitions to be tested is 13\n[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state'), ('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('ring_state', ('receive_message', ('${200}',)), 'ready_state'), ('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state'), ('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state'), ('ready_state', ('receive_message', ('${BYE}',)), 'idle_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')]\n['idle_state']\n['idle_state']\n All possibles paths to be tested is 6\n['idle_state', 'init_state', 'calling_state', 'terminating_state', 'cancel_state', 'ring_state', 'ready_state', 'wait_response_state']\n*******************\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;4', 'from', '2', 'to', '4']\n['Take', 'arc', '4-&gt;7', 'from', '4', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']\n['Take', 'arc', '5-&gt;4', 'from', '5', 'to', '4']\n['Take', 'arc', '4-&gt;7', 'from', '4', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']\n['Take', 'arc', '5-&gt;6', 'from', '5', 'to', '6']\n['Take', 'arc', '6-&gt;0', 'from', '6', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;3', 'from', '2', 'to', '3']\n['Take', 'arc', '3-&gt;0', 'from', '3', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']\n['Take', 'arc', '5-&gt;0', 'from', '5', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;3', 'from', '2', 'to', '3']\n['Take', 'arc', '3-&gt;0', 'from', '3', 'to', '0']\n['Cost', '=', '28.0']\n28\n[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${200}',)), 'ready_state'), ('ready_state', ('receive_message', ('${BYE}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')]\nShortest path to cover all transition has 28 transitions to cover\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state')\n('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state')\n('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')\n('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state')\n('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state')\n('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')\n('ring_state', ('receive_message', ('${200}',)), 'ready_state')\n('ready_state', ('receive_message', ('${BYE}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state')\n('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')\n('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state')\n('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')\nThe case is to do SIP Service test  in cost-effective way")</msg>
<msg timestamp="20121012 16:45:16.971" level="INFO">${rc} = 0</msg>
<msg timestamp="20121012 16:45:16.971" level="INFO">${output} =  All possibles transitions to be tested is 13
[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ...</msg>
<status status="PASS" endtime="20121012 16:45:16.970" starttime="20121012 16:45:16.483"></status>
</kw>
<kw type="kw" name="BuiltIn.Log" timeout="">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20121012 16:45:16.972" level="TRACE">Arguments: [ u" All possibles transitions to be tested is 13\n[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state'), ('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('ring_state', ('receive_message', ('${200}',)), 'ready_state'), ('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state'), ('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state'), ('ready_state', ('receive_message', ('${BYE}',)), 'idle_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')]\n['idle_state']\n['idle_state']\n All possibles paths to be tested is 6\n['idle_state', 'init_state', 'calling_state', 'terminating_state', 'cancel_state', 'ring_state', 'ready_state', 'wait_response_state']\n*******************\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;4', 'from', '2', 'to', '4']\n['Take', 'arc', '4-&gt;7', 'from', '4', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']\n['Take', 'arc', '5-&gt;4', 'from', '5', 'to', '4']\n['Take', 'arc', '4-&gt;7', 'from', '4', 'to', '7']\n['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']\n['Take', 'arc', '5-&gt;6', 'from', '5', 'to', '6']\n['Take', 'arc', '6-&gt;0', 'from', '6', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;3', 'from', '2', 'to', '3']\n['Take', 'arc', '3-&gt;0', 'from', '3', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']\n['Take', 'arc', '5-&gt;0', 'from', '5', 'to', '0']\n['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']\n['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']\n['Take', 'arc', '2-&gt;3', 'from', '2', 'to', '3']\n['Take', 'arc', '3-&gt;0', 'from', '3', 'to', '0']\n['Cost', '=', '28.0']\n28\n[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${200}',)), 'ready_state'), ('ready_state', ('receive_message', ('${BYE}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')]\nShortest path to cover all transition has 28 transitions to cover\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state')\n('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state')\n('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')\n('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state')\n('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state')\n('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')\n('ring_state', ('receive_message', ('${200}',)), 'ready_state')\n('ready_state', ('receive_message', ('${BYE}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state')\n('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')\n('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state')\n('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')\n('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')\n('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state')\n('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')\nThe case is to do SIP Service test  in cost-effective way" ]</msg>
<msg timestamp="20121012 16:45:16.972" level="INFO"> All possibles transitions to be tested is 13
[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state'), ('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('ring_state', ('receive_message', ('${200}',)), 'ready_state'), ('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state'), ('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state'), ('ready_state', ('receive_message', ('${BYE}',)), 'idle_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')]
['idle_state']
['idle_state']
 All possibles paths to be tested is 6
['idle_state', 'init_state', 'calling_state', 'terminating_state', 'cancel_state', 'ring_state', 'ready_state', 'wait_response_state']
*******************
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;4', 'from', '2', 'to', '4']
['Take', 'arc', '4-&gt;7', 'from', '4', 'to', '7']
['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']
['Take', 'arc', '5-&gt;4', 'from', '5', 'to', '4']
['Take', 'arc', '4-&gt;7', 'from', '4', 'to', '7']
['Take', 'arc', '7-&gt;0', 'from', '7', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']
['Take', 'arc', '5-&gt;6', 'from', '5', 'to', '6']
['Take', 'arc', '6-&gt;0', 'from', '6', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;3', 'from', '2', 'to', '3']
['Take', 'arc', '3-&gt;0', 'from', '3', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;5', 'from', '2', 'to', '5']
['Take', 'arc', '5-&gt;0', 'from', '5', 'to', '0']
['Take', 'arc', '0-&gt;1', 'from', '0', 'to', '1']
['Take', 'arc', '1-&gt;2', 'from', '1', 'to', '2']
['Take', 'arc', '2-&gt;3', 'from', '2', 'to', '3']
['Take', 'arc', '3-&gt;0', 'from', '3', 'to', '0']
['Cost', '=', '28.0']
28
[('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state'), ('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state'), ('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${200}',)), 'ready_state'), ('ready_state', ('receive_message', ('${BYE}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state'), ('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state'), ('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state'), ('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state'), ('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state'), ('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')]
Shortest path to cover all transition has 28 transitions to cover
('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')
('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')
('calling_state', ('receive_message', ('${REJECT}',)), 'cancel_state')
('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state')
('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')
('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')
('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')
('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')
('ring_state', ('receive_message', ('${CANCEL}',)), 'cancel_state')
('cancel_state', ('receive_message', ('${200_Cancel}',)), 'wait_response_state')
('wait_response_state', ('receive_message', ('${487_Invite}',)), 'idle_state')
('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')
('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')
('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')
('ring_state', ('receive_message', ('${200}',)), 'ready_state')
('ready_state', ('receive_message', ('${BYE}',)), 'idle_state')
('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')
('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')
('calling_state', ('receive_message', ('${TIMEOUTB}',)), 'terminating_state')
('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')
('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')
('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')
('calling_state', ('receive_message', ('${CALL_PROCEEDING}',)), 'ring_state')
('ring_state', ('receive_message', ('${REJECT}',)), 'idle_state')
('idle_state', ('receive_message', ('${OFFHOOK_SIGNAL}',)), 'init_state')
('init_state', ('receive_message', ('${CALLING_SIGNAL}',)), 'calling_state')
('calling_state', ('receive_message', ('${TIMEOUTA}',)), 'terminating_state')
('terminating_state', ('receive_message', ('${200_BYE}',)), 'idle_state')
The case is to do SIP Service test  in cost-effective way</msg>
<msg timestamp="20121012 16:45:16.973" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.973" starttime="20121012 16:45:16.972"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers" timeout="">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20121012 16:45:16.973" level="TRACE">Arguments: [ 0 | u'0' ]</msg>
<msg timestamp="20121012 16:45:16.973" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20121012 16:45:16.973" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:16.973" starttime="20121012 16:45:16.973"></status>
</kw>
<kw type="kw" name="${rc}, ${output} = OperatingSystem.Run And Return Rc And Output" timeout="">
<doc>Runs the given command in the system and returns the RC and output.</doc>
<arguments>
<arg>python runner.py example\\Volume_create_delete_function\\create_and_delete_volume_test -g random -t 10 -s atdd</arg>
</arguments>
<msg timestamp="20121012 16:45:16.974" level="TRACE">Arguments: [ u'python runner.py example\\Volume_create_delete_function\\create_and_delete_volume_test -g random -t 10 -s atdd' ]</msg>
<msg timestamp="20121012 16:45:16.974" level="INFO">Running command 'python runner.py example\Volume_create_delete_function\create_and_delete_volume_test -g random -t 10 -s atdd 2&gt;&amp;1'</msg>
<msg timestamp="20121012 16:45:17.665" level="TRACE">Return: (0, u"The case is to create and delete all kinds of volumes\n[{'format_method': 'quick', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '65536', 'type': 'Primary', 'file_system': 'NTFS', 'size': '500'}, {'format_method': 'slow', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'quick', 'compression': 'on', 'cluster_size': '65536', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '8192', 'type': 'Primary', 'file_system': 'NTFS', 'size': '500'}, {'format_method': 'quick', 'compression': 'off', 'cluster_size': '1024', 'type': 'Logical', 'file_system': 'NTFS', 'size': '1000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '65536', 'type': 'Primary', 'file_system': 'NTFS', 'size': '40000'}, {'format_method': 'slow', 'compression': 'on', 'cluster_size': '32768', 'type': 'Span', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '32768', 'type': 'Single', 'file_system': 'NTFS', 'size': '10'}, {'format_method': 'quick', 'compression': 'on', 'cluster_size': '1024', 'type': 'Stripe', 'file_system': 'NTFS', 'size': '5000'}]")</msg>
<msg timestamp="20121012 16:45:17.665" level="INFO">${rc} = 0</msg>
<msg timestamp="20121012 16:45:17.666" level="INFO">${output} = The case is to create and delete all kinds of volumes
[{'format_method': 'quick', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method...</msg>
<status status="PASS" endtime="20121012 16:45:17.665" starttime="20121012 16:45:16.973"></status>
</kw>
<kw type="kw" name="BuiltIn.Log" timeout="">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20121012 16:45:17.666" level="TRACE">Arguments: [ u"The case is to create and delete all kinds of volumes\n[{'format_method': 'quick', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '65536', 'type': 'Primary', 'file_system': 'NTFS', 'size': '500'}, {'format_method': 'slow', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'quick', 'compression': 'on', 'cluster_size': '65536', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '8192', 'type': 'Primary', 'file_system': 'NTFS', 'size': '500'}, {'format_method': 'quick', 'compression': 'off', 'cluster_size': '1024', 'type': 'Logical', 'file_system': 'NTFS', 'size': '1000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '65536', 'type': 'Primary', 'file_system': 'NTFS', 'size': '40000'}, {'format_method': 'slow', 'compression': 'on', 'cluster_size': '32768', 'type': 'Span', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '32768', 'type': 'Single', 'file_system': 'NTFS', 'size': '10'}, {'format_method': 'quick', 'compression': 'on', 'cluster_size': '1024', 'type': 'Stripe', 'file_system': 'NTFS', 'size': '5000'}]" ]</msg>
<msg timestamp="20121012 16:45:17.666" level="INFO">The case is to create and delete all kinds of volumes
[{'format_method': 'quick', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '65536', 'type': 'Primary', 'file_system': 'NTFS', 'size': '500'}, {'format_method': 'slow', 'compression': 'on', 'cluster_size': '512', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'quick', 'compression': 'on', 'cluster_size': '65536', 'type': 'Logical', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '8192', 'type': 'Primary', 'file_system': 'NTFS', 'size': '500'}, {'format_method': 'quick', 'compression': 'off', 'cluster_size': '1024', 'type': 'Logical', 'file_system': 'NTFS', 'size': '1000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '65536', 'type': 'Primary', 'file_system': 'NTFS', 'size': '40000'}, {'format_method': 'slow', 'compression': 'on', 'cluster_size': '32768', 'type': 'Span', 'file_system': 'NTFS', 'size': '5000'}, {'format_method': 'slow', 'compression': 'off', 'cluster_size': '32768', 'type': 'Single', 'file_system': 'NTFS', 'size': '10'}, {'format_method': 'quick', 'compression': 'on', 'cluster_size': '1024', 'type': 'Stripe', 'file_system': 'NTFS', 'size': '5000'}]</msg>
<msg timestamp="20121012 16:45:17.666" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:17.666" starttime="20121012 16:45:17.666"></status>
</kw>
<kw type="kw" name="BuiltIn.Should Be Equal As Integers" timeout="">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${rc}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20121012 16:45:17.667" level="TRACE">Arguments: [ 0 | u'0' ]</msg>
<msg timestamp="20121012 16:45:17.667" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20121012 16:45:17.667" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20121012 16:45:17.667" starttime="20121012 16:45:17.667"></status>
</kw>
<doc></doc>
<tags>
</tags>
<status status="PASS" endtime="20121012 16:45:17.668" critical="yes" starttime="20121012 16:45:15.404"></status>
</test>
<doc></doc>
<status status="PASS" endtime="20121012 16:45:17.670" starttime="20121012 16:45:15.359"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat fail="0" pass="1" id="s1" name="TestCase">TestCase</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
